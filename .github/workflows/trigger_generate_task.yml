name: Trigger Generate Task

on:
  push:
    branches:
      - main

jobs:
  trigger:
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Generate Task Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: generate_task.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: |
            {
              "template": "# Programming Task: Modeling Objects in Java\n\n## Introduction\n\nIn this task, you will model objects in Java. You will practice creating classes, defining attributes, and implementing methods. This exercise will help you understand the principles of object-oriented programming and how to structure your code effectively.\n\n## Learning Objectives\n\nBy the end of this task, you should be able to:\n\n1. Design and implement classes in Java.\n2. Define and use attributes (fields) and methods (functions).\n3. Implement constructors and destructors (if applicable).\n4. Apply principles of encapsulation, inheritance, and polymorphism.\n5. Write unit tests to verify the correctness of your code.\n\n## Task Requirements\n\n### Part 1: Define a Class\n\n1. Create a class named `Indamon` with the following attributes:\n- `name` (string): The name of the Indamon.\n- `hp` (integer): The hit points of the Indamon.\n- `attack` (integer): The attack value of the Indamon.\n- `defense` (integer): The defense value of the Indamon.\n- `fainted` (boolean): A flag indicating if the Indamon has fainted.\n\n2. Implement a constructor to initialize these attributes.\n\n### Part 2: Implement Methods\n\n1. Add getter and setter methods for each attribute.\n2. Implement a method `printInfo` to print all the information about the Indamon.\n3. Implement a method `attack` that takes another `Indamon` object as a parameter and simulates an attack, reducing the opponent's `hp` based on the attacker's `attack` value and the opponent's `defense` value.\n\n### Part 3: Unit Testing\n\n1. Write unit tests to verify the correctness of your class implementation.\n2. Ensure that all methods are tested, including edge cases (e.g., attacking when `hp` is zero).\n\n### Part 4: Documentation\n\n1. Add comments and docstrings to your code to explain the purpose of each class, method, and attribute.\n2. Ensure that your code adheres to the style guidelines for Java.\n\n## Submission\n\n1. Submit your code by pushing it to your GitHub repository in the `submissions` folder.\n2. Ensure that all unit tests pass before submission.\n3. The grading will be based on the correctness, code style, efficiency, and documentation.\n\n## Example\n\nHere is an example of how your `Indamon` class might look in Java:\n\n```java\npublic class Indamon {\n    private String name;\n    private int hp;\n    private int attack;\n    private int defense;\n    private boolean fainted;\n\n    public Indamon(String name, int hp, int attack, int defense) {\n        this.name = name;\n        this.hp = hp;\n        this.attack = attack;\n        this.defense = defense;\n        this.fainted = false;\n    }\n\n    public void printInfo() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"HP: \" + hp);\n        System.out.println(\"Attack: \" + attack);\n        System.out.println(\"Defense: \" + defense);\n        System.out.println(\"Fainted: \" + fainted);\n    }\n\n    public void attack(Indamon other) {\n        if (!fainted && !other.fainted) {\n            int damage = attack - other.defense;\n            other.hp = Math.max(other.hp - damage, 0);\n            if (other.hp <= 0) {\n                other.fainted = true;\n                other.hp = 0;\n            }\n            System.out.println(name + \" attacked \" + other.name + \" for \" + damage + \" damage! \" + other.name + \" has \" + other.hp + \" HP left.\");\n        } else {\n            System.out.println(\"Cannot attack. One of the Indamons has fainted.\");\n        }\n    }\n}\n```",
              "requirements": "{\"difficulty\": \"medium\", \"language\": \"Java\"}"
            }
